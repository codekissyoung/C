!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AF_LOCAL	net.h	39;"	d
CC	Makefile	/^CC:=$(shell sh -c 'type $(CC) >\/dev\/null 2>\/dev\/null && echo $(CC) || echo gcc')$/;"	m
CONN_FD	test.c	/^    CONN_FD$/;"	e	enum:connection_type	file:
CONN_TCP	test.c	/^    CONN_TCP,$/;"	e	enum:connection_type	file:
CONN_UNIX	test.c	/^    CONN_UNIX,$/;"	e	enum:connection_type	file:
DEBUG	Makefile	/^DEBUG?= -g -ggdb$/;"	m
DICT_ERR	dict.h	40;"	d
DICT_HT_INITIAL_SIZE	dict.h	76;"	d
DICT_NOTUSED	dict.h	43;"	d
DICT_OK	dict.h	39;"	d
DYLIBNAME	Makefile	/^DYLIBNAME=$(LIBNAME).$(DYLIBSUFFIX)$/;"	m
DYLIBSUFFIX	Makefile	/^  DYLIBSUFFIX=dylib$/;"	m
DYLIBSUFFIX	Makefile	/^DYLIBSUFFIX=so$/;"	m
DYLIB_MAJOR_NAME	Makefile	/^  DYLIB_MAJOR_NAME=$(LIBNAME).$(HIREDIS_MAJOR).$(DYLIBSUFFIX)$/;"	m
DYLIB_MAJOR_NAME	Makefile	/^DYLIB_MAJOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
DYLIB_MAKE_CMD	Makefile	/^  DYLIB_MAKE_CMD=$(CC) -G -o $(DYLIBNAME) -h $(DYLIB_MINOR_NAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	Makefile	/^  DYLIB_MAKE_CMD=$(CC) -shared -Wl,-install_name,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	Makefile	/^DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MINOR_NAME	Makefile	/^  DYLIB_MINOR_NAME=$(LIBNAME).$(HIREDIS_MAJOR).$(HIREDIS_MINOR).$(DYLIBSUFFIX)$/;"	m
DYLIB_MINOR_NAME	Makefile	/^DYLIB_MINOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR).$(HIREDIS_MINOR)$/;"	m
EXAMPLES	Makefile	/^EXAMPLES=hiredis-example hiredis-example-libevent hiredis-example-libev$/;"	m
FLOAT_WIDTH_TEST	test.c	174;"	d	file:
HIREDIS_MAJOR	Makefile	/^HIREDIS_MAJOR=0$/;"	m
HIREDIS_MAJOR	hiredis.h	38;"	d
HIREDIS_MINOR	Makefile	/^HIREDIS_MINOR=11$/;"	m
HIREDIS_MINOR	hiredis.h	39;"	d
HIREDIS_PATCH	hiredis.h	40;"	d
INSTALL	Makefile	/^  INSTALL= cp -r$/;"	m
INSTALL	Makefile	/^  INSTALL?= cp -r$/;"	m
INSTALL	Makefile	/^INSTALL?= cp -a$/;"	m
INSTALL_INCLUDE_PATH	Makefile	/^INSTALL_INCLUDE_PATH= $(PREFIX)\/include\/hiredis$/;"	m
INSTALL_LIBRARY_PATH	Makefile	/^INSTALL_LIBRARY_PATH= $(PREFIX)\/lib$/;"	m
INTEGER_WIDTH_TEST	test.c	165;"	d	file:
LIBNAME	Makefile	/^LIBNAME=libhiredis$/;"	m
OBJ	Makefile	/^OBJ=net.o hiredis.o sds.o async.o$/;"	m
OPTIMIZATION	Makefile	/^OPTIMIZATION?=-O3$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
REAL_CFLAGS	Makefile	/^REAL_CFLAGS=$(OPTIMIZATION) -fPIC $(CFLAGS) $(WARNINGS) $(DEBUG) $(ARCH)$/;"	m
REAL_LDFLAGS	Makefile	/^REAL_LDFLAGS=$(LDFLAGS) $(ARCH)$/;"	m
REDIS_BLOCK	hiredis.h	57;"	d
REDIS_CONNECTED	hiredis.h	61;"	d
REDIS_DISCONNECTING	hiredis.h	67;"	d
REDIS_ERR	hiredis.h	42;"	d
REDIS_ERR_EOF	hiredis.h	50;"	d
REDIS_ERR_IO	hiredis.h	49;"	d
REDIS_ERR_OOM	hiredis.h	52;"	d
REDIS_ERR_OTHER	hiredis.h	53;"	d
REDIS_ERR_PROTOCOL	hiredis.h	51;"	d
REDIS_FREEING	hiredis.h	71;"	d
REDIS_IN_CALLBACK	hiredis.h	74;"	d
REDIS_KEEPALIVE_INTERVAL	hiredis.h	91;"	d
REDIS_MONITORING	hiredis.h	80;"	d
REDIS_OK	hiredis.h	43;"	d
REDIS_PORT	Makefile	/^REDIS_PORT=56379$/;"	m
REDIS_READER_MAX_BUF	hiredis.h	89;"	d
REDIS_REPLY_ARRAY	hiredis.h	83;"	d
REDIS_REPLY_ERROR	hiredis.h	87;"	d
REDIS_REPLY_INTEGER	hiredis.h	84;"	d
REDIS_REPLY_NIL	hiredis.h	85;"	d
REDIS_REPLY_STATUS	hiredis.h	86;"	d
REDIS_REPLY_STRING	hiredis.h	82;"	d
REDIS_SERVER	Makefile	/^REDIS_SERVER=redis-server$/;"	m
REDIS_SUBSCRIBED	hiredis.h	77;"	d
REDIS_TEST_CONFIG	Makefile	/^define REDIS_TEST_CONFIG$/;"	m
SDS_LLSTR_SIZE	sds.c	298;"	d	file:
SDS_MAX_PREALLOC	sds.h	34;"	d
STLIBNAME	Makefile	/^STLIBNAME=$(LIBNAME).$(STLIBSUFFIX)$/;"	m
STLIBSUFFIX	Makefile	/^STLIBSUFFIX=a$/;"	m
STLIB_MAKE_CMD	Makefile	/^STLIB_MAKE_CMD=ar rcs $(STLIBNAME)$/;"	m
TESTS	Makefile	/^TESTS=hiredis-test$/;"	m
WARNINGS	Makefile	/^WARNINGS=-Wall -W -Wstrict-prototypes -Wwrite-strings$/;"	m
ZMALLOC_H	zmalloc.h	5;"	d
_BSD_SOURCE	fmacros.h	5;"	d
_EL_ADD_READ	async.c	44;"	d	file:
_EL_ADD_WRITE	async.c	50;"	d	file:
_EL_CLEANUP	async.c	56;"	d	file:
_EL_DEL_READ	async.c	47;"	d	file:
_EL_DEL_WRITE	async.c	53;"	d	file:
_OSX	fmacros.h	17;"	d
_POSIX_C_SOURCE	fmacros.h	9;"	d
_XOPEN_SOURCE	fmacros.h	11;"	d
_XOPEN_SOURCE	fmacros.h	13;"	d
__DICT_H	dict.h	37;"	d
__HIREDIS_AE_H__	adapters/ae.h	32;"	d
__HIREDIS_ASYNC_H	async.h	33;"	d
__HIREDIS_FMACRO_H	fmacros.h	2;"	d
__HIREDIS_H	hiredis.h	33;"	d
__HIREDIS_LIBEVENT_H__	adapters/libevent.h	32;"	d
__HIREDIS_LIBEV_H__	adapters/libev.h	32;"	d
__HIREDIS_LIBUV_H__	adapters/libuv.h	2;"	d
__MAX_MSEC	net.c	176;"	d	file:
__NET_H	net.h	34;"	d
__SDS_H	sds.h	32;"	d
__redisAppendCommand	async.c	/^void __redisAppendCommand(redisContext *c, char *cmd, size_t len);$/;"	p	file:	signature:(redisContext *c, char *cmd, size_t len)
__redisAppendCommand	hiredis.c	/^int __redisAppendCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f	signature:(redisContext *c, const char *cmd, size_t len)
__redisAsyncCommand	async.c	/^static int __redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, char *cmd, size_t len) {$/;"	f	file:	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, char *cmd, size_t len)
__redisAsyncCopyError	async.c	/^static void __redisAsyncCopyError(redisAsyncContext *ac) {$/;"	f	file:	signature:(redisAsyncContext *ac)
__redisAsyncDisconnect	async.c	/^static void __redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	file:	signature:(redisAsyncContext *ac)
__redisAsyncFree	async.c	/^static void __redisAsyncFree(redisAsyncContext *ac) {$/;"	f	file:	signature:(redisAsyncContext *ac)
__redisAsyncHandleConnect	async.c	/^static int __redisAsyncHandleConnect(redisAsyncContext *ac) {$/;"	f	file:	signature:(redisAsyncContext *ac)
__redisBlockForReply	hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
__redisGetSubscribeCallback	async.c	/^static int __redisGetSubscribeCallback(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb) {$/;"	f	file:	signature:(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb)
__redisPushCallback	async.c	/^static int __redisPushCallback(redisCallbackList *list, redisCallback *source) {$/;"	f	file:	signature:(redisCallbackList *list, redisCallback *source)
__redisReaderSetError	hiredis.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	file:	signature:(redisReader *r, int type, const char *str)
__redisReaderSetErrorOOM	hiredis.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
__redisReaderSetErrorProtocolByte	hiredis.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	file:	signature:(redisReader *r, char byte)
__redisRunCallback	async.c	/^static void __redisRunCallback(redisAsyncContext *ac, redisCallback *cb, redisReply *reply) {$/;"	f	file:	signature:(redisAsyncContext *ac, redisCallback *cb, redisReply *reply)
__redisSetError	hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f	signature:(redisContext *c, int type, const char *str)
__redisSetError	net.c	/^void __redisSetError(redisContext *c, int type, const char *str);$/;"	p	file:	signature:(redisContext *c, int type, const char *str)
__redisSetErrorFromErrno	net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	file:	signature:(redisContext *c, int type, const char *prefix)
__redisShiftCallback	async.c	/^static int __redisShiftCallback(redisCallbackList *list, redisCallback *target) {$/;"	f	file:	signature:(redisCallbackList *list, redisCallback *target)
_dictClear	dict.c	/^static int _dictClear(dict *ht) {$/;"	f	file:	signature:(dict *ht)
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *ht) {$/;"	f	file:	signature:(dict *ht)
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *ht);$/;"	p	file:	signature:(dict *ht)
_dictInit	dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr) {$/;"	f	file:	signature:(dict *ht, dictType *type, void *privDataPtr)
_dictInit	dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr);$/;"	p	file:	signature:(dict *ht, dictType *type, void *privDataPtr)
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *ht, const void *key) {$/;"	f	file:	signature:(dict *ht, const void *key)
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *ht, const void *key);$/;"	p	file:	signature:(dict *ht, const void *key)
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size) {$/;"	f	file:	signature:(unsigned long size)
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size);$/;"	p	file:	signature:(unsigned long size)
_dictReset	dict.c	/^static void _dictReset(dict *ht) {$/;"	f	file:	signature:(dict *ht)
_redisContextConnectTcp	net.c	/^static int _redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	file:	signature:(redisContext *c, const char *addr, int port, const struct timeval *timeout, const char *source_addr)
addRead	async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
addWrite	async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
buf	hiredis.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr	access:public
bulklen	hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	file:	signature:(size_t len)
c	async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext	access:public
callbackDict	async.c	/^static dictType callbackDict = {$/;"	v	file:
callbackHash	async.c	/^static unsigned int callbackHash(const void *key) {$/;"	f	file:	signature:(const void *key)
callbackKeyCompare	async.c	/^static int callbackKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	file:	signature:(void *privdata, const void *key1, const void *key2)
callbackKeyDestructor	async.c	/^static void callbackKeyDestructor(void *privdata, void *key) {$/;"	f	file:	signature:(void *privdata, void *key)
callbackValDestructor	async.c	/^static void callbackValDestructor(void *privdata, void *val) {$/;"	f	file:	signature:(void *privdata, void *val)
callbackValDup	async.c	/^static void *callbackValDup(void *privdata, const void *src) {$/;"	f	file:	signature:(void *privdata, const void *src)
channels	async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon4	typeref:struct:redisAsyncContext::__anon4::dict	access:public
chrtos	hiredis.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	file:	signature:(char *buf, size_t size, char byte)
cleanup	async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
config	test.c	/^struct config {$/;"	s	file:
config::__anon1::host	test.c	/^        const char *host;$/;"	m	struct:config::__anon1	file:	access:public
config::__anon1::port	test.c	/^        int port;$/;"	m	struct:config::__anon1	file:	access:public
config::__anon1::timeout	test.c	/^        struct timeval timeout;$/;"	m	struct:config::__anon1	typeref:struct:config::__anon1::timeval	file:	access:public
config::__anon2::path	test.c	/^        const char *path;$/;"	m	struct:config::__anon2	file:	access:public
config::tcp	test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anon1	file:	access:public
config::type	test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:config::connection_type	file:	access:public
config::unix	test.c	/^    } unix;$/;"	m	struct:config	typeref:struct:config::__anon2	file:	access:public
connect	test.c	/^static redisContext *connect(struct config config) {$/;"	f	file:	signature:(struct config config)
connectCallback	examples/example-ae.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
connectCallback	examples/example-libev.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
connectCallback	examples/example-libevent.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
connectCallback	examples/example-libuv.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
connection_type	test.c	/^enum connection_type {$/;"	g	file:
context	adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	access:public
context	adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents	access:public
context	adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents	access:public
context	adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents	access:public
createArray	hiredis.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions	access:public
createArrayObject	hiredis.c	/^static void *createArrayObject(const redisReadTask *task, int elements) {$/;"	f	file:	signature:(const redisReadTask *task, int elements)
createArrayObject	hiredis.c	/^static void *createArrayObject(const redisReadTask *task, int elements);$/;"	p	file:	signature:(const redisReadTask *task, int elements)
createInteger	hiredis.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions	access:public
createIntegerObject	hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	file:	signature:(const redisReadTask *task, long long value)
createIntegerObject	hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value);$/;"	p	file:	signature:(const redisReadTask *task, long long value)
createNil	hiredis.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions	access:public
createNilObject	hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	file:	signature:(const redisReadTask *task)
createNilObject	hiredis.c	/^static void *createNilObject(const redisReadTask *task);$/;"	p	file:	signature:(const redisReadTask *task)
createReplyObject	hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	file:	signature:(int type)
createReplyObject	hiredis.c	/^static redisReply *createReplyObject(int type);$/;"	p	file:	signature:(int type)
createString	hiredis.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions	access:public
createStringObject	hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	file:	signature:(const redisReadTask *task, char *str, size_t len)
createStringObject	hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len);$/;"	p	file:	signature:(const redisReadTask *task, char *str, size_t len)
data	async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon3	access:public
data	async.h	/^    void *data;$/;"	m	struct:redisAsyncContext	access:public
defaultFunctions	hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	file:
delRead	async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
delWrite	async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict::privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict	access:public
dict::size	dict.h	/^    unsigned long size;$/;"	m	struct:dict	access:public
dict::sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict	access:public
dict::table	dict.h	/^    dictEntry **table;$/;"	m	struct:dict	access:public
dict::type	dict.h	/^    dictType *type;$/;"	m	struct:dict	access:public
dict::used	dict.h	/^    unsigned long used;$/;"	m	struct:dict	access:public
dictAdd	dict.c	/^static int dictAdd(dict *ht, void *key, void *val) {$/;"	f	file:	signature:(dict *ht, void *key, void *val)
dictAdd	dict.h	/^static int dictAdd(dict *ht, void *key, void *val);$/;"	p	signature:(dict *ht, void *key, void *val)
dictCompareHashKeys	dict.h	101;"	d
dictCreate	dict.c	/^static dict *dictCreate(dictType *type, void *privDataPtr) {$/;"	f	file:	signature:(dictType *type, void *privDataPtr)
dictCreate	dict.h	/^static dict *dictCreate(dictType *type, void *privDataPtr);$/;"	p	signature:(dictType *type, void *privDataPtr)
dictDelete	dict.c	/^static int dictDelete(dict *ht, const void *key) {$/;"	f	file:	signature:(dict *ht, const void *key)
dictDelete	dict.h	/^static int dictDelete(dict *ht, const void *key);$/;"	p	signature:(dict *ht, const void *key)
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictEntry::key	dict.h	/^    void *key;$/;"	m	struct:dictEntry	access:public
dictEntry::next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry	access:public
dictEntry::val	dict.h	/^    void *val;$/;"	m	struct:dictEntry	access:public
dictExpand	dict.c	/^static int dictExpand(dict *ht, unsigned long size) {$/;"	f	file:	signature:(dict *ht, unsigned long size)
dictExpand	dict.h	/^static int dictExpand(dict *ht, unsigned long size);$/;"	p	signature:(dict *ht, unsigned long size)
dictFind	dict.c	/^static dictEntry *dictFind(dict *ht, const void *key) {$/;"	f	file:	signature:(dict *ht, const void *key)
dictFind	dict.h	/^static dictEntry * dictFind(dict *ht, const void *key);$/;"	p	signature:(dict *ht, const void *key)
dictFreeEntryKey	dict.h	90;"	d
dictFreeEntryVal	dict.h	79;"	d
dictGenHashFunction	dict.c	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f	file:	signature:(const unsigned char *buf, int len)
dictGenHashFunction	dict.h	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len);$/;"	p	signature:(const unsigned char *buf, int len)
dictGetEntryKey	dict.h	108;"	d
dictGetEntryVal	dict.h	109;"	d
dictGetIterator	dict.c	/^static dictIterator *dictGetIterator(dict *ht) {$/;"	f	file:	signature:(dict *ht)
dictGetIterator	dict.h	/^static dictIterator *dictGetIterator(dict *ht);$/;"	p	signature:(dict *ht)
dictHashKey	dict.h	106;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictIterator::entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
dictIterator::ht	dict.h	/^    dict *ht;$/;"	m	struct:dictIterator	access:public
dictIterator::index	dict.h	/^    int index;$/;"	m	struct:dictIterator	access:public
dictIterator::nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
dictNext	dict.c	/^static dictEntry *dictNext(dictIterator *iter) {$/;"	f	file:	signature:(dictIterator *iter)
dictNext	dict.h	/^static dictEntry *dictNext(dictIterator *iter);$/;"	p	signature:(dictIterator *iter)
dictRelease	dict.c	/^static void dictRelease(dict *ht) {$/;"	f	file:	signature:(dict *ht)
dictRelease	dict.h	/^static void dictRelease(dict *ht);$/;"	p	signature:(dict *ht)
dictReleaseIterator	dict.c	/^static void dictReleaseIterator(dictIterator *iter) {$/;"	f	file:	signature:(dictIterator *iter)
dictReleaseIterator	dict.h	/^static void dictReleaseIterator(dictIterator *iter);$/;"	p	signature:(dictIterator *iter)
dictReplace	dict.c	/^static int dictReplace(dict *ht, void *key, void *val) {$/;"	f	file:	signature:(dict *ht, void *key, void *val)
dictReplace	dict.h	/^static int dictReplace(dict *ht, void *key, void *val);$/;"	p	signature:(dict *ht, void *key, void *val)
dictSetHashKey	dict.h	94;"	d
dictSetHashVal	dict.h	83;"	d
dictSize	dict.h	111;"	d
dictSlots	dict.h	110;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictType::hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType	access:public
dictType::keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	access:public
dictType::keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	access:public
dictType::keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	access:public
dictType::valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	access:public
dictType::valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	access:public
disconnect	test.c	/^static int disconnect(redisContext *c, int keep_fd) {$/;"	f	file:	signature:(redisContext *c, int keep_fd)
disconnectCallback	examples/example-ae.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
disconnectCallback	examples/example-libev.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
disconnectCallback	examples/example-libevent.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
disconnectCallback	examples/example-libuv.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
element	hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply	access:public
elements	hiredis.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask	access:public
elements	hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	access:public
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
err	async.h	/^    int err;$/;"	m	struct:redisAsyncContext	access:public
err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext	access:public
err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader	access:public
errstr	async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext	access:public
errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext	access:public
errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader	access:public
ev	async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon3	access:public
events	adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents	access:public
fails	test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
fd	adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents	access:public
fd	hiredis.h	/^    int fd;$/;"	m	struct:redisContext	access:public
flags	hiredis.h	/^    int flags;$/;"	m	struct:redisContext	access:public
fn	async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback	access:public
fn	hiredis.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader	access:public
free	sds.h	/^    int free;$/;"	m	struct:sdshdr	access:public
freeObject	hiredis.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions	access:public
freeReplyObject	hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f	signature:(void *reply)
freeReplyObject	hiredis.h	/^void freeReplyObject(void *reply);$/;"	p	signature:(void *reply)
getCallback	examples/example-ae.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *r, void *privdata)
getCallback	examples/example-libev.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *r, void *privdata)
getCallback	examples/example-libevent.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *r, void *privdata)
getCallback	examples/example-libuv.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *r, void *privdata)
handle	adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents	access:public
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType	access:public
head	async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	access:public
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f	signature:(char c)
host	test.c	/^        const char *host;$/;"	m	struct:config::__anon1	file:	access:public
ht	dict.h	/^    dict *ht;$/;"	m	struct:dictIterator	access:public
idx	hiredis.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask	access:public
index	dict.h	/^    int index;$/;"	m	struct:dictIterator	access:public
integer	hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply	access:public
intlen	hiredis.c	/^static int intlen(int i) {$/;"	f	file:	signature:(int i)
invalid	async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon4	access:public
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f	signature:(char c)
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry	access:public
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	access:public
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	access:public
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	access:public
len	hiredis.h	/^    int len; \/* Length of string *\/$/;"	m	struct:redisReply	access:public
len	hiredis.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader	access:public
len	sds.h	/^    int len;$/;"	m	struct:sdshdr	access:public
loop	adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	access:public
loop	adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop	access:public
loop	examples/example-ae.c	/^static aeEventLoop *loop;$/;"	v	file:
main	examples/example-ae.c	/^int main (int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	examples/example-libev.c	/^int main (int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	examples/example-libevent.c	/^int main (int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	examples/example-libuv.c	/^int main (int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	examples/example.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	sds.c	/^int main(void) {$/;"	f	signature:(void)
main	test.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
maxbuf	hiredis.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader	access:public
moveToNextTask	hiredis.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
next	async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback	access:public
next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry	access:public
nextArgument	async.c	/^static char *nextArgument(char *start, char **str, size_t *len) {$/;"	f	file:	signature:(char *start, char **str, size_t *len)
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
obj	hiredis.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask	access:public
obuf	hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext	access:public
onConnect	async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext	access:public
onDisconnect	async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext	access:public
on_close	adapters/libuv.h	/^static void on_close(uv_handle_t* handle) {$/;"	f	signature:(uv_handle_t* handle)
parent	hiredis.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask	access:public
path	test.c	/^        const char *path;$/;"	m	struct:config::__anon2	file:	access:public
patterns	async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon4	typeref:struct:redisAsyncContext::__anon4::dict	access:public
port	test.c	/^        int port;$/;"	m	struct:config::__anon1	file:	access:public
pos	hiredis.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader	access:public
privdata	async.h	/^    void *privdata;$/;"	m	struct:redisCallback	access:public
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict	access:public
privdata	hiredis.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask	access:public
privdata	hiredis.h	/^    void *privdata;$/;"	m	struct:redisReader	access:public
processBulkItem	hiredis.c	/^static int processBulkItem(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
processItem	hiredis.c	/^static int processItem(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
processLineItem	hiredis.c	/^static int processLineItem(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
processMultiBulkItem	hiredis.c	/^static int processMultiBulkItem(redisReader *r) {$/;"	f	file:	signature:(redisReader *r)
readBytes	hiredis.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	file:	signature:(redisReader *r, unsigned int bytes)
readLine	hiredis.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	file:	signature:(redisReader *r, int *_len)
readLongLong	hiredis.c	/^static long long readLongLong(char *s) {$/;"	f	file:	signature:(char *s)
reader	hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext	access:public
reading	adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	access:public
reading	adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	access:public
redisAeAddRead	adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisAeAddWrite	adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisAeAttach	adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	signature:(aeEventLoop *loop, redisAsyncContext *ac)
redisAeCleanup	adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f	signature:(void *privdata)
redisAeDelRead	adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisAeDelWrite	adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisAeEvents	adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeEvents::context	adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	access:public
redisAeEvents::fd	adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents	access:public
redisAeEvents::loop	adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	access:public
redisAeEvents::reading	adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	access:public
redisAeEvents::writing	adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	access:public
redisAeReadEvent	adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
redisAeWriteEvent	adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
redisAppendCommand	hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f	signature:(redisContext *c, const char *format, ...)
redisAppendCommand	hiredis.h	/^int redisAppendCommand(redisContext *c, const char *format, ...);$/;"	p	signature:(redisContext *c, const char *format, ...)
redisAppendCommandArgv	hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f	signature:(redisContext *c, int argc, const char **argv, const size_t *argvlen)
redisAppendCommandArgv	hiredis.h	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);$/;"	p	signature:(redisContext *c, int argc, const char **argv, const size_t *argvlen)
redisAppendFormattedCommand	hiredis.c	/^int redisAppendFormattedCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f	signature:(redisContext *c, const char *cmd, size_t len)
redisAppendFormattedCommand	hiredis.h	/^int redisAppendFormattedCommand(redisContext *c, const char *cmd, size_t len);$/;"	p	signature:(redisContext *c, const char *cmd, size_t len)
redisAsyncCommand	async.c	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...) {$/;"	f	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...)
redisAsyncCommand	async.h	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...);$/;"	p	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...)
redisAsyncCommandArgv	async.c	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen) {$/;"	f	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen)
redisAsyncCommandArgv	async.h	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen);$/;"	p	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen)
redisAsyncConnect	async.c	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port) {$/;"	f	signature:(const char *ip, int port)
redisAsyncConnect	async.h	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port);$/;"	p	signature:(const char *ip, int port)
redisAsyncConnectBind	async.c	/^redisAsyncContext *redisAsyncConnectBind(const char *ip, int port,$/;"	f	signature:(const char *ip, int port, const char *source_addr)
redisAsyncConnectBind	async.h	/^redisAsyncContext *redisAsyncConnectBind(const char *ip, int port, const char *source_addr);$/;"	p	signature:(const char *ip, int port, const char *source_addr)
redisAsyncConnectUnix	async.c	/^redisAsyncContext *redisAsyncConnectUnix(const char *path) {$/;"	f	signature:(const char *path)
redisAsyncConnectUnix	async.h	/^redisAsyncContext *redisAsyncConnectUnix(const char *path);$/;"	p	signature:(const char *path)
redisAsyncContext	async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisAsyncContext::__anon3::addRead	async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon3::addWrite	async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon3::cleanup	async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon3::data	async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon3::delRead	async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon3::delWrite	async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::__anon4::channels	async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon4	typeref:struct:redisAsyncContext::__anon4::dict	access:public
redisAsyncContext::__anon4::invalid	async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon4	access:public
redisAsyncContext::__anon4::patterns	async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon4	typeref:struct:redisAsyncContext::__anon4::dict	access:public
redisAsyncContext::c	async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::data	async.h	/^    void *data;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::err	async.h	/^    int err;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::errstr	async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::ev	async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon3	access:public
redisAsyncContext::onConnect	async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::onDisconnect	async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::replies	async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext	access:public
redisAsyncContext::sub	async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon4	access:public
redisAsyncDisconnect	async.c	/^void redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	signature:(redisAsyncContext *ac)
redisAsyncDisconnect	async.h	/^void redisAsyncDisconnect(redisAsyncContext *ac);$/;"	p	signature:(redisAsyncContext *ac)
redisAsyncFree	async.c	/^void redisAsyncFree(redisAsyncContext *ac) {$/;"	f	signature:(redisAsyncContext *ac)
redisAsyncFree	async.h	/^void redisAsyncFree(redisAsyncContext *ac);$/;"	p	signature:(redisAsyncContext *ac)
redisAsyncHandleRead	async.c	/^void redisAsyncHandleRead(redisAsyncContext *ac) {$/;"	f	signature:(redisAsyncContext *ac)
redisAsyncHandleRead	async.h	/^void redisAsyncHandleRead(redisAsyncContext *ac);$/;"	p	signature:(redisAsyncContext *ac)
redisAsyncHandleWrite	async.c	/^void redisAsyncHandleWrite(redisAsyncContext *ac) {$/;"	f	signature:(redisAsyncContext *ac)
redisAsyncHandleWrite	async.h	/^void redisAsyncHandleWrite(redisAsyncContext *ac);$/;"	p	signature:(redisAsyncContext *ac)
redisAsyncInitialize	async.c	/^static redisAsyncContext *redisAsyncInitialize(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
redisAsyncSetConnectCallback	async.c	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn) {$/;"	f	signature:(redisAsyncContext *ac, redisConnectCallback *fn)
redisAsyncSetConnectCallback	async.h	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn);$/;"	p	signature:(redisAsyncContext *ac, redisConnectCallback *fn)
redisAsyncSetDisconnectCallback	async.c	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn) {$/;"	f	signature:(redisAsyncContext *ac, redisDisconnectCallback *fn)
redisAsyncSetDisconnectCallback	async.h	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn);$/;"	p	signature:(redisAsyncContext *ac, redisDisconnectCallback *fn)
redisBufferRead	hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f	signature:(redisContext *c)
redisBufferRead	hiredis.h	/^int redisBufferRead(redisContext *c);$/;"	p	signature:(redisContext *c)
redisBufferWrite	hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f	signature:(redisContext *c, int *done)
redisBufferWrite	hiredis.h	/^int redisBufferWrite(redisContext *c, int *done);$/;"	p	signature:(redisContext *c, int *done)
redisCallback	async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallback::fn	async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback	access:public
redisCallback::next	async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback	access:public
redisCallback::privdata	async.h	/^    void *privdata;$/;"	m	struct:redisCallback	access:public
redisCallbackFn	async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisCallbackList::head	async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	access:public
redisCallbackList::tail	async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	access:public
redisCheckSocketError	net.c	/^int redisCheckSocketError(redisContext *c) {$/;"	f	signature:(redisContext *c)
redisCheckSocketError	net.h	/^int redisCheckSocketError(redisContext *c);$/;"	p	signature:(redisContext *c)
redisCommand	hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f	signature:(redisContext *c, const char *format, ...)
redisCommand	hiredis.h	/^void *redisCommand(redisContext *c, const char *format, ...);$/;"	p	signature:(redisContext *c, const char *format, ...)
redisCommandArgv	hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f	signature:(redisContext *c, int argc, const char **argv, const size_t *argvlen)
redisCommandArgv	hiredis.h	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);$/;"	p	signature:(redisContext *c, int argc, const char **argv, const size_t *argvlen)
redisConnect	hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f	signature:(const char *ip, int port)
redisConnect	hiredis.h	/^redisContext *redisConnect(const char *ip, int port);$/;"	p	signature:(const char *ip, int port)
redisConnectBindNonBlock	hiredis.c	/^redisContext *redisConnectBindNonBlock(const char *ip, int port,$/;"	f	signature:(const char *ip, int port, const char *source_addr)
redisConnectBindNonBlock	hiredis.h	/^redisContext *redisConnectBindNonBlock(const char *ip, int port, const char *source_addr);$/;"	p	signature:(const char *ip, int port, const char *source_addr)
redisConnectCallback	async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectFd	hiredis.c	/^redisContext *redisConnectFd(int fd) {$/;"	f	signature:(int fd)
redisConnectFd	hiredis.h	/^redisContext *redisConnectFd(int fd);$/;"	p	signature:(int fd)
redisConnectNonBlock	hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f	signature:(const char *ip, int port)
redisConnectNonBlock	hiredis.h	/^redisContext *redisConnectNonBlock(const char *ip, int port);$/;"	p	signature:(const char *ip, int port)
redisConnectUnix	hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f	signature:(const char *path)
redisConnectUnix	hiredis.h	/^redisContext *redisConnectUnix(const char *path);$/;"	p	signature:(const char *path)
redisConnectUnixNonBlock	hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f	signature:(const char *path)
redisConnectUnixNonBlock	hiredis.h	/^redisContext *redisConnectUnixNonBlock(const char *path);$/;"	p	signature:(const char *path)
redisConnectUnixWithTimeout	hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, const struct timeval tv) {$/;"	f	signature:(const char *path, const struct timeval tv)
redisConnectUnixWithTimeout	hiredis.h	/^redisContext *redisConnectUnixWithTimeout(const char *path, const struct timeval tv);$/;"	p	signature:(const char *path, const struct timeval tv)
redisConnectWithTimeout	hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv) {$/;"	f	signature:(const char *ip, int port, const struct timeval tv)
redisConnectWithTimeout	hiredis.h	/^redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv);$/;"	p	signature:(const char *ip, int port, const struct timeval tv)
redisContext	hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContext::err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext	access:public
redisContext::errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext	access:public
redisContext::fd	hiredis.h	/^    int fd;$/;"	m	struct:redisContext	access:public
redisContext::flags	hiredis.h	/^    int flags;$/;"	m	struct:redisContext	access:public
redisContext::obuf	hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext	access:public
redisContext::reader	hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext	access:public
redisContextCloseFd	net.c	/^static void redisContextCloseFd(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
redisContextConnectBindTcp	net.c	/^int redisContextConnectBindTcp(redisContext *c, const char *addr, int port,$/;"	f	signature:(redisContext *c, const char *addr, int port, const struct timeval *timeout, const char *source_addr)
redisContextConnectBindTcp	net.h	/^int redisContextConnectBindTcp(redisContext *c, const char *addr, int port,$/;"	p	signature:(redisContext *c, const char *addr, int port, const struct timeval *timeout, const char *source_addr)
redisContextConnectTcp	net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	signature:(redisContext *c, const char *addr, int port, const struct timeval *timeout)
redisContextConnectTcp	net.h	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port, const struct timeval *timeout);$/;"	p	signature:(redisContext *c, const char *addr, int port, const struct timeval *timeout)
redisContextConnectUnix	net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {$/;"	f	signature:(redisContext *c, const char *path, const struct timeval *timeout)
redisContextConnectUnix	net.h	/^int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout);$/;"	p	signature:(redisContext *c, const char *path, const struct timeval *timeout)
redisContextInit	hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	file:	signature:(void)
redisContextSetTimeout	net.c	/^int redisContextSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f	signature:(redisContext *c, const struct timeval tv)
redisContextSetTimeout	net.h	/^int redisContextSetTimeout(redisContext *c, const struct timeval tv);$/;"	p	signature:(redisContext *c, const struct timeval tv)
redisContextWaitReady	net.c	/^static int redisContextWaitReady(redisContext *c, const struct timeval *timeout) {$/;"	f	file:	signature:(redisContext *c, const struct timeval *timeout)
redisCreateSocket	net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	file:	signature:(redisContext *c, int type)
redisDisconnectCallback	async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisEnableKeepAlive	hiredis.c	/^int redisEnableKeepAlive(redisContext *c) {$/;"	f	signature:(redisContext *c)
redisEnableKeepAlive	hiredis.h	/^int redisEnableKeepAlive(redisContext *c);$/;"	p	signature:(redisContext *c)
redisFormatCommand	hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f	signature:(char **target, const char *format, ...)
redisFormatCommand	hiredis.h	/^int redisFormatCommand(char **target, const char *format, ...);$/;"	p	signature:(char **target, const char *format, ...)
redisFormatCommandArgv	hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f	signature:(char **target, int argc, const char **argv, const size_t *argvlen)
redisFormatCommandArgv	hiredis.h	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen);$/;"	p	signature:(char **target, int argc, const char **argv, const size_t *argvlen)
redisFree	hiredis.c	/^void redisFree(redisContext *c) {$/;"	f	signature:(redisContext *c)
redisFree	hiredis.h	/^void redisFree(redisContext *c);$/;"	p	signature:(redisContext *c)
redisFreeKeepFd	hiredis.c	/^int redisFreeKeepFd(redisContext *c) {$/;"	f	signature:(redisContext *c)
redisFreeKeepFd	hiredis.h	/^int redisFreeKeepFd(redisContext *c);$/;"	p	signature:(redisContext *c)
redisGetReply	hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f	signature:(redisContext *c, void **reply)
redisGetReply	hiredis.h	/^int redisGetReply(redisContext *c, void **reply);$/;"	p	signature:(redisContext *c, void **reply)
redisGetReplyFromReader	hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f	signature:(redisContext *c, void **reply)
redisGetReplyFromReader	hiredis.h	/^int redisGetReplyFromReader(redisContext *c, void **reply);$/;"	p	signature:(redisContext *c, void **reply)
redisKeepAlive	net.c	/^int redisKeepAlive(redisContext *c, int interval) {$/;"	f	signature:(redisContext *c, int interval)
redisKeepAlive	net.h	/^int redisKeepAlive(redisContext *c, int interval);$/;"	p	signature:(redisContext *c, int interval)
redisLibevAddRead	adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibevAddWrite	adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibevAttach	adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f	signature:(EV_P_ redisAsyncContext *ac)
redisLibevCleanup	adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibevDelRead	adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibevDelWrite	adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibevEvents	adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevEvents::context	adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents	access:public
redisLibevEvents::loop	adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop	access:public
redisLibevEvents::reading	adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	access:public
redisLibevEvents::rev	adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	access:public
redisLibevEvents::wev	adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	access:public
redisLibevEvents::writing	adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	access:public
redisLibevReadEvent	adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f	signature:(EV_P_ ev_io *watcher, int revents)
redisLibevWriteEvent	adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f	signature:(EV_P_ ev_io *watcher, int revents)
redisLibeventAddRead	adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibeventAddWrite	adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibeventAttach	adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f	signature:(redisAsyncContext *ac, struct event_base *base)
redisLibeventCleanup	adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibeventDelRead	adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibeventDelWrite	adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibeventEvents	adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventEvents::context	adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents	access:public
redisLibeventEvents::rev	adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event	access:public
redisLibeventEvents::wev	adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::	access:public
redisLibeventReadEvent	adapters/libevent.h	/^static void redisLibeventReadEvent(int fd, short event, void *arg) {$/;"	f	signature:(int fd, short event, void *arg)
redisLibeventWriteEvent	adapters/libevent.h	/^static void redisLibeventWriteEvent(int fd, short event, void *arg) {$/;"	f	signature:(int fd, short event, void *arg)
redisLibuvAddRead	adapters/libuv.h	/^static void redisLibuvAddRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibuvAddWrite	adapters/libuv.h	/^static void redisLibuvAddWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibuvAttach	adapters/libuv.h	/^int redisLibuvAttach(redisAsyncContext*, uv_loop_t*);$/;"	p	signature:(redisAsyncContext*, uv_loop_t*)
redisLibuvAttach	adapters/libuv.h	/^static int redisLibuvAttach(redisAsyncContext* ac, uv_loop_t* loop) {$/;"	f	signature:(redisAsyncContext* ac, uv_loop_t* loop)
redisLibuvCleanup	adapters/libuv.h	/^static void redisLibuvCleanup(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibuvDelRead	adapters/libuv.h	/^static void redisLibuvDelRead(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibuvDelWrite	adapters/libuv.h	/^static void redisLibuvDelWrite(void *privdata) {$/;"	f	signature:(void *privdata)
redisLibuvEvents	adapters/libuv.h	/^typedef struct redisLibuvEvents {$/;"	s
redisLibuvEvents	adapters/libuv.h	/^} redisLibuvEvents;$/;"	t	typeref:struct:redisLibuvEvents
redisLibuvEvents::context	adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents	access:public
redisLibuvEvents::events	adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents	access:public
redisLibuvEvents::handle	adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents	access:public
redisLibuvPoll	adapters/libuv.h	/^static void redisLibuvPoll(uv_poll_t* handle, int status, int events) {$/;"	f	signature:(uv_poll_t* handle, int status, int events)
redisProcessCallbacks	async.c	/^void redisProcessCallbacks(redisAsyncContext *ac) {$/;"	f	signature:(redisAsyncContext *ac)
redisReadTask	hiredis.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	hiredis.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReadTask::elements	hiredis.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask	access:public
redisReadTask::idx	hiredis.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask	access:public
redisReadTask::obj	hiredis.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask	access:public
redisReadTask::parent	hiredis.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask	access:public
redisReadTask::privdata	hiredis.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask	access:public
redisReadTask::type	hiredis.h	/^    int type;$/;"	m	struct:redisReadTask	access:public
redisReader	hiredis.h	/^typedef struct redisReader {$/;"	s
redisReader	hiredis.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReader::buf	hiredis.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader	access:public
redisReader::err	hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader	access:public
redisReader::errstr	hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader	access:public
redisReader::fn	hiredis.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader	access:public
redisReader::len	hiredis.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader	access:public
redisReader::maxbuf	hiredis.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader	access:public
redisReader::pos	hiredis.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader	access:public
redisReader::privdata	hiredis.h	/^    void *privdata;$/;"	m	struct:redisReader	access:public
redisReader::reply	hiredis.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader	access:public
redisReader::ridx	hiredis.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader	access:public
redisReader::rstack	hiredis.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader	access:public
redisReaderCreate	hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f	signature:(void)
redisReaderCreate	hiredis.h	/^redisReader *redisReaderCreate(void);$/;"	p	signature:(void)
redisReaderFeed	hiredis.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f	signature:(redisReader *r, const char *buf, size_t len)
redisReaderFeed	hiredis.h	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len);$/;"	p	signature:(redisReader *r, const char *buf, size_t len)
redisReaderFree	hiredis.c	/^void redisReaderFree(redisReader *r) {$/;"	f	signature:(redisReader *r)
redisReaderFree	hiredis.h	/^void redisReaderFree(redisReader *r);$/;"	p	signature:(redisReader *r)
redisReaderGetReply	hiredis.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f	signature:(redisReader *r, void **reply)
redisReaderGetReply	hiredis.h	/^int redisReaderGetReply(redisReader *r, void **reply);$/;"	p	signature:(redisReader *r, void **reply)
redisReply	hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReply::element	hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply	access:public
redisReply::elements	hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	access:public
redisReply::integer	hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply	access:public
redisReply::len	hiredis.h	/^    int len; \/* Length of string *\/$/;"	m	struct:redisReply	access:public
redisReply::str	hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply	access:public
redisReply::type	hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply	access:public
redisReplyObjectFunctions	hiredis.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	hiredis.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisReplyObjectFunctions::createArray	hiredis.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions	access:public
redisReplyObjectFunctions::createInteger	hiredis.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions	access:public
redisReplyObjectFunctions::createNil	hiredis.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions	access:public
redisReplyObjectFunctions::createString	hiredis.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions	access:public
redisReplyObjectFunctions::freeObject	hiredis.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions	access:public
redisReplyReaderCreate	hiredis.h	149;"	d
redisReplyReaderFeed	hiredis.h	151;"	d
redisReplyReaderFree	hiredis.h	150;"	d
redisReplyReaderGetError	hiredis.h	155;"	d
redisReplyReaderGetObject	hiredis.h	154;"	d
redisReplyReaderGetReply	hiredis.h	152;"	d
redisReplyReaderSetPrivdata	hiredis.h	153;"	d
redisSetBlocking	net.c	/^static int redisSetBlocking(redisContext *c, int blocking) {$/;"	f	file:	signature:(redisContext *c, int blocking)
redisSetReuseAddr	net.c	/^static int redisSetReuseAddr(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
redisSetTcpNoDelay	net.c	/^static int redisSetTcpNoDelay(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
redisSetTimeout	hiredis.c	/^int redisSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f	signature:(redisContext *c, const struct timeval tv)
redisSetTimeout	hiredis.h	/^int redisSetTimeout(redisContext *c, const struct timeval tv);$/;"	p	signature:(redisContext *c, const struct timeval tv)
redisvAppendCommand	hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f	signature:(redisContext *c, const char *format, va_list ap)
redisvAppendCommand	hiredis.h	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap);$/;"	p	signature:(redisContext *c, const char *format, va_list ap)
redisvAsyncCommand	async.c	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap) {$/;"	f	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap)
redisvAsyncCommand	async.h	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap);$/;"	p	signature:(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap)
redisvCommand	hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f	signature:(redisContext *c, const char *format, va_list ap)
redisvCommand	hiredis.h	/^void *redisvCommand(redisContext *c, const char *format, va_list ap);$/;"	p	signature:(redisContext *c, const char *format, va_list ap)
redisvFormatCommand	hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f	signature:(char **target, const char *format, va_list ap)
redisvFormatCommand	hiredis.h	/^int redisvFormatCommand(char **target, const char *format, va_list ap);$/;"	p	signature:(char **target, const char *format, va_list ap)
replies	async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext	access:public
reply	hiredis.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader	access:public
rev	adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	access:public
rev	adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event	access:public
ridx	hiredis.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader	access:public
rstack	hiredis.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader	access:public
sds	sds.h	/^typedef char *sds;$/;"	t
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f	signature:(sds s)
sdsAllocSize	sds.h	/^size_t sdsAllocSize(sds s);$/;"	p	signature:(sds s)
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f	signature:(sds s, int incr)
sdsIncrLen	sds.h	/^void sdsIncrLen(sds s, int incr);$/;"	p	signature:(sds s, int incr)
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	signature:(sds s, size_t addlen)
sdsMakeRoomFor	sds.h	/^sds sdsMakeRoomFor(sds s, size_t addlen);$/;"	p	signature:(sds s, size_t addlen)
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f	signature:(sds s)
sdsRemoveFreeSpace	sds.h	/^sds sdsRemoveFreeSpace(sds s);$/;"	p	signature:(sds s)
sdsavail	sds.h	/^size_t sdsavail(const sds s);$/;"	p	signature:(const sds s)
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f	signature:(const sds s)
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f	signature:(sds s, const char *t)
sdscat	sds.h	/^sds sdscat(sds s, const char *t);$/;"	p	signature:(sds s, const char *t)
sdscatfmt	sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f	signature:(sds s, char const *fmt, ...)
sdscatfmt	sds.h	/^sds sdscatfmt(sds s, char const *fmt, ...);$/;"	p	signature:(sds s, char const *fmt, ...)
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f	signature:(sds s, const void *t, size_t len)
sdscatlen	sds.h	/^sds sdscatlen(sds s, const void *t, size_t len);$/;"	p	signature:(sds s, const void *t, size_t len)
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f	signature:(sds s, const char *fmt, ...)
sdscatprintf	sds.h	/^sds sdscatprintf(sds s, const char *fmt, ...)$/;"	p	signature:(sds s, const char *fmt, ...)
sdscatprintf	sds.h	/^sds sdscatprintf(sds s, const char *fmt, ...);$/;"	p	signature:(sds s, const char *fmt, ...)
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f	signature:(sds s, const char *p, size_t len)
sdscatrepr	sds.h	/^sds sdscatrepr(sds s, const char *p, size_t len);$/;"	p	signature:(sds s, const char *p, size_t len)
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f	signature:(sds s, const sds t)
sdscatsds	sds.h	/^sds sdscatsds(sds s, const sds t);$/;"	p	signature:(sds s, const sds t)
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f	signature:(sds s, const char *fmt, va_list ap)
sdscatvprintf	sds.h	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap);$/;"	p	signature:(sds s, const char *fmt, va_list ap)
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f	signature:(sds s)
sdsclear	sds.h	/^void sdsclear(sds s);$/;"	p	signature:(sds s)
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f	signature:(const sds s1, const sds s2)
sdscmp	sds.h	/^int sdscmp(const sds s1, const sds s2);$/;"	p	signature:(const sds s1, const sds s2)
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f	signature:(sds s, const char *t)
sdscpy	sds.h	/^sds sdscpy(sds s, const char *t);$/;"	p	signature:(sds s, const char *t)
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f	signature:(sds s, const char *t, size_t len)
sdscpylen	sds.h	/^sds sdscpylen(sds s, const char *t, size_t len);$/;"	p	signature:(sds s, const char *t, size_t len)
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f	signature:(const sds s)
sdsdup	sds.h	/^sds sdsdup(const sds s);$/;"	p	signature:(const sds s)
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f	signature:(void)
sdsempty	sds.h	/^sds sdsempty(void);$/;"	p	signature:(void)
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f	signature:(sds s)
sdsfree	sds.h	/^void sdsfree(sds s);$/;"	p	signature:(sds s)
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f	signature:(sds *tokens, int count)
sdsfreesplitres	sds.h	/^void sdsfreesplitres(sds *tokens, int count);$/;"	p	signature:(sds *tokens, int count)
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f	signature:(long long value)
sdsfromlonglong	sds.h	/^sds sdsfromlonglong(long long value);$/;"	p	signature:(long long value)
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f	signature:(sds s, size_t len)
sdsgrowzero	sds.h	/^sds sdsgrowzero(sds s, size_t len);$/;"	p	signature:(sds s, size_t len)
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdshdr::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr	access:public
sdshdr::free	sds.h	/^    int free;$/;"	m	struct:sdshdr	access:public
sdshdr::len	sds.h	/^    int len;$/;"	m	struct:sdshdr	access:public
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f	signature:(char **argv, int argc, char *sep)
sdsjoin	sds.h	/^sds sdsjoin(char **argv, int argc, char *sep);$/;"	p	signature:(char **argv, int argc, char *sep)
sdslen	sds.h	/^size_t sdslen(const sds s);$/;"	p	signature:(const sds s)
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f	signature:(const sds s)
sdsll2str	sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f	signature:(char *s, long long value)
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f	signature:(sds s, const char *from, const char *to, size_t setlen)
sdsmapchars	sds.h	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen);$/;"	p	signature:(sds s, const char *from, const char *to, size_t setlen)
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f	signature:(const char *init)
sdsnew	sds.h	/^sds sdsnew(const char *init);$/;"	p	signature:(const char *init)
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f	signature:(const void *init, size_t initlen)
sdsnewlen	sds.h	/^sds sdsnewlen(const void *init, size_t initlen);$/;"	p	signature:(const void *init, size_t initlen)
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f	signature:(sds s, int start, int end)
sdsrange	sds.h	/^void sdsrange(sds s, int start, int end);$/;"	p	signature:(sds s, int start, int end)
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f	signature:(const char *line, int *argc)
sdssplitargs	sds.h	/^sds *sdssplitargs(const char *line, int *argc);$/;"	p	signature:(const char *line, int *argc)
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f	signature:(const char *s, int len, const char *sep, int seplen, int *count)
sdssplitlen	sds.h	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count);$/;"	p	signature:(const char *s, int len, const char *sep, int seplen, int *count)
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f	signature:(sds s)
sdstolower	sds.h	/^void sdstolower(sds s);$/;"	p	signature:(sds s)
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f	signature:(sds s)
sdstoupper	sds.h	/^void sdstoupper(sds s);$/;"	p	signature:(sds s)
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f	signature:(sds s, const char *cset)
sdstrim	sds.h	/^sds sdstrim(sds s, const char *cset);$/;"	p	signature:(sds s, const char *cset)
sdsull2str	sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f	signature:(char *s, unsigned long long v)
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f	signature:(sds s)
sdsupdatelen	sds.h	/^void sdsupdatelen(sds s);$/;"	p	signature:(sds s)
seekNewline	hiredis.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	file:	signature:(char *s, size_t len)
select_database	test.c	/^static redisContext *select_database(redisContext *c) {$/;"	f	file:	signature:(redisContext *c)
size	dict.h	/^    unsigned long size;$/;"	m	struct:dict	access:public
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict	access:public
str	hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply	access:public
sub	async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon4	access:public
table	dict.h	/^    dictEntry **table;$/;"	m	struct:dict	access:public
tail	async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	access:public
tcp	test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anon1	file:	access:public
test	test.c	37;"	d	file:
test_append_formatted_commands	test.c	/^static void test_append_formatted_commands(struct config config) {$/;"	f	file:	signature:(struct config config)
test_blocking_connection	test.c	/^static void test_blocking_connection(struct config config) {$/;"	f	file:	signature:(struct config config)
test_blocking_connection_errors	test.c	/^static void test_blocking_connection_errors(void) {$/;"	f	file:	signature:(void)
test_blocking_io_errors	test.c	/^static void test_blocking_io_errors(struct config config) {$/;"	f	file:	signature:(struct config config)
test_cond	test.c	38;"	d	file:
test_format_commands	test.c	/^static void test_format_commands(void) {$/;"	f	file:	signature:(void)
test_invalid_timeout_errors	test.c	/^static void test_invalid_timeout_errors(struct config config) {$/;"	f	file:	signature:(struct config config)
test_reply_reader	test.c	/^static void test_reply_reader(void) {$/;"	f	file:	signature:(void)
test_throughput	test.c	/^static void test_throughput(struct config config) {$/;"	f	file:	signature:(struct config config)
tests	test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
timeout	test.c	/^        struct timeval timeout;$/;"	m	struct:config::__anon1	typeref:struct:config::__anon1::timeval	file:	access:public
type	dict.h	/^    dictType *type;$/;"	m	struct:dict	access:public
type	hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply	access:public
type	hiredis.h	/^    int type;$/;"	m	struct:redisReadTask	access:public
type	test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:config::connection_type	file:	access:public
uname_S	Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unix	test.c	/^    } unix;$/;"	m	struct:config	typeref:struct:config::__anon2	file:	access:public
usec	test.c	/^static long long usec(void) {$/;"	f	file:	signature:(void)
used	dict.h	/^    unsigned long used;$/;"	m	struct:dict	access:public
val	dict.h	/^    void *val;$/;"	m	struct:dictEntry	access:public
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	access:public
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	access:public
wev	adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	access:public
wev	adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::	access:public
writing	adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	access:public
writing	adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	access:public
zcalloc	zmalloc.h	9;"	d
zfree	zmalloc.h	10;"	d
zmalloc	zmalloc.h	7;"	d
zrealloc	zmalloc.h	8;"	d
zstrdup	zmalloc.h	11;"	d
